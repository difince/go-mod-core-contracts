// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import mock "github.com/stretchr/testify/mock"
import models "github.com/edgexfoundry/go-mod-core-contracts/models"

// DeviceProfileClient is an autogenerated mock type for the DeviceProfileClient type
type DeviceProfileClient struct {
	mock.Mock
}

// Add provides a mock function with given fields: dp, ctx
func (_m *DeviceProfileClient) Add(dp *models.DeviceProfile, ctx context.Context) (string, error) {
	ret := _m.Called(dp, ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(*models.DeviceProfile, context.Context) string); ok {
		r0 = rf(dp, ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.DeviceProfile, context.Context) error); ok {
		r1 = rf(dp, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id, ctx
func (_m *DeviceProfileClient) Delete(id string, ctx context.Context) error {
	ret := _m.Called(id, ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, context.Context) error); ok {
		r0 = rf(id, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByName provides a mock function with given fields: name, ctx
func (_m *DeviceProfileClient) DeleteByName(name string, ctx context.Context) error {
	ret := _m.Called(name, ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, context.Context) error); ok {
		r0 = rf(name, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeviceProfile provides a mock function with given fields: id, ctx
func (_m *DeviceProfileClient) DeviceProfile(id string, ctx context.Context) (models.DeviceProfile, error) {
	ret := _m.Called(id, ctx)

	var r0 models.DeviceProfile
	if rf, ok := ret.Get(0).(func(string, context.Context) models.DeviceProfile); ok {
		r0 = rf(id, ctx)
	} else {
		r0 = ret.Get(0).(models.DeviceProfile)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, context.Context) error); ok {
		r1 = rf(id, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceProfileForName provides a mock function with given fields: name, ctx
func (_m *DeviceProfileClient) DeviceProfileForName(name string, ctx context.Context) (models.DeviceProfile, error) {
	ret := _m.Called(name, ctx)

	var r0 models.DeviceProfile
	if rf, ok := ret.Get(0).(func(string, context.Context) models.DeviceProfile); ok {
		r0 = rf(name, ctx)
	} else {
		r0 = ret.Get(0).(models.DeviceProfile)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, context.Context) error); ok {
		r1 = rf(name, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeviceProfiles provides a mock function with given fields: ctx
func (_m *DeviceProfileClient) DeviceProfiles(ctx context.Context) ([]models.DeviceProfile, error) {
	ret := _m.Called(ctx)

	var r0 []models.DeviceProfile
	if rf, ok := ret.Get(0).(func(context.Context) []models.DeviceProfile); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DeviceProfile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: dp, ctx
func (_m *DeviceProfileClient) Update(dp models.DeviceProfile, ctx context.Context) error {
	ret := _m.Called(dp, ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.DeviceProfile, context.Context) error); ok {
		r0 = rf(dp, ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upload provides a mock function with given fields: yamlString, ctx
func (_m *DeviceProfileClient) Upload(yamlString string, ctx context.Context) (string, error) {
	ret := _m.Called(yamlString, ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, context.Context) string); ok {
		r0 = rf(yamlString, ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, context.Context) error); ok {
		r1 = rf(yamlString, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadFile provides a mock function with given fields: yamlFilePath, ctx
func (_m *DeviceProfileClient) UploadFile(yamlFilePath string, ctx context.Context) (string, error) {
	ret := _m.Called(yamlFilePath, ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, context.Context) string); ok {
		r0 = rf(yamlFilePath, ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, context.Context) error); ok {
		r1 = rf(yamlFilePath, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
